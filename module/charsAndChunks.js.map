{"version":3,"file":"charsAndChunks.js","sources":["../src/dataLockBox.js","../src/collectionManagement.js","../src/configuration.js","../src/charsAndChunks.js","../src/index.js"],"sourcesContent":["const dataLockBox = (function() {\n  /**\n   * Definition of storage structure\n   * @member {Map} lock - Map of characters and regular expressions holding a context.\n   * @member {WeakMap} box - WeakMap of contexts holding an object with a single charcter, a callback and a description\n   */\n  const LockBoxModel = function() {\n    this.lock = new Map()\n    this.box = new WeakMap()\n  }\n\n  let data = new LockBoxModel()\n\n  let stash = []\n\n  /**\n   * Snaity check for storage\n   * @private\n   * @returns {boolean} is sane\n   */\n  const storageSanity = function(props) {\n    const OK = typeof props.context === 'object'\n    if (!OK) {\n      console.error('Cannot store')\n    }\n    return OK\n  }\n\n  /**\n   * Store a user match and a context as lock\n   * and a context as a box with matches holding data\n   * @private\n   * @param {object} props\n   *    @member {primitive | object} match\n   *    @member {object} context\n   *    @member {primitive | object} box - the data itself\n   */\n  const store = function(props) {\n    // console.log(`match to write: ${props.match}`)\n    if (!storageSanity(props)) return\n    // Register context with string or regular expression in a Map\n    data.lock.set(props.match, props.context)\n    // console.log(`context written: ${data.lock.get(props.match)}`)\n    if (!data.box.has(props.context)) {\n      data.box.set(props.context, {})\n    }\n    // console.log(`box to write: ${data.box.get(props.context)}`)\n    // Register data with context in a WeakMap\n    data.box.get(props.context)[props.match] = props.box\n    // console.log(`box written: ${data.box.get(props.context)}`)\n  }\n\n  /**\n   * Find the right data for entry\n   * @param {object} props\n   *   @member {string} match - key for the lock map\n   * @returns {object} stored data object\n   */\n  const retrieve = function(props) {\n    // console.log(`entry to handle: ${props.entry}`)\n\n    if (data.lock.has(props.entry)) {\n      // find context from lock,\n      let context = data.lock.get(props.entry)\n      // console.log('context to handle:', context)\n      if (context && data.box.has(context)) {\n        const box = data.box.get(context)[props.entry]\n        // console.log('box to handle:', box)\n        return box\n      }\n    }\n  }\n\n  /**\n   * Generate a list of active matches (those with a not-cleaned-up context)\n   * @returns {Array} records\n   */\n  const overview = function() {\n    let records = []\n    const keys = data.lock.keys()\n\n    for (let key of keys) {\n      let box = retrieve({ entry: key })\n      if (data.lock.get(key)) {\n        let record = { match: key, box: box }\n        records.push(record)\n      }\n    }\n    //console.log('overview' + JSON.stringify(records))\n    return records\n  }\n\n  /**\n   * Clear all matches and data\n   */\n  const reset = function() {\n    data = new LockBoxModel()\n  }\n\n  /*\n   * Disable all current data en put up a clean storage\n   */\n  const overlay = function() {\n    stash.push(Object.assign({}, data))\n    reset()\n    //console.log(`go to stack level ${stash.length}`)\n  }\n\n  /*\n   * Remove the superseded data and enable the previous data\n   */\n  const revive = function() {\n    if (stash.length) {\n      //console.log(`remove stack level ${stash.length}`)\n      data = stash.pop()\n    }\n  }\n\n  /*\n   * Remove references to contexts\n   * @param {object} context\n   */\n  const cleanup = function(context) {\n    // console.log('cleanup context', context)\n    data.lock.forEach((matchyVal, match) => {\n      // console.log('cleanup locks', matchyVal, match)\n      if (data.lock.get(match) === context) {\n        // console.log('cleanup REMOVE', data.box.get(context)[match])\n        data.lock.delete(match)\n      }\n    })\n    data.box.delete(context)\n  }\n\n  return {\n    store: store,\n    retrieve: retrieve,\n    keys: function() {\n      return data.lock.keys()\n    },\n    overview: overview,\n    reset: reset,\n    overlay: overlay,\n    revive: revive,\n    cleanup: cleanup,\n  }\n})()\n\nexport { dataLockBox }\n","import { dataLockBox } from './dataLockBox'\n\nconst collectionManagement = (function() {\n  /**\n   * Default regular expression.\n   */\n  const catchAllRegExp = /^/\n\n  /**\n   * Update deprecated v1 properties object\n   * @private\n   * @param {object} props - props according to version 1\n   * @returns {object}\n   */\n  const convertVersion1Props = function(props) {\n    if (!props.match && !props.regex && !props.char) {\n      props.match = catchAllRegExp\n    }\n    if (props.regex) {\n      props.match = props.regex\n      delete props.regex\n    }\n    if (props.char) {\n      props.match = props.char\n      delete props.char\n    }\n    if (props.comment) {\n      props.description = props.comment\n      delete props.comment\n    }\n    return props\n  }\n\n  /**\n   * Check sanity of a registration object\n   * @private\n   * @param {object} props\n   * @returns {boolean}\n   */\n  const registrationSanity = function(props) {\n    const matchOK =\n      props.match &&\n      props.match.toString().length &&\n      (typeof props.match === 'string' || props.match instanceof RegExp)\n    const contextOK = (function() {\n      if (typeof props.context === 'string') {\n        props.context = document.querySelector(props.context)\n      }\n      return props.context && typeof props.context === 'object'\n      //props.context instanceof Node\n    })()\n    const callbackOK = typeof props.callback === 'function'\n    const descriptionOK =\n      typeof props.description === 'string' && props.description.length\n    const OK = matchOK && contextOK && callbackOK && descriptionOK\n\n    // if (!OK) {\n    //   console.log(`!OK ${JSON.stringify(props)}`)\n    //   console.log(`\n    //     matchOK: ${matchOK}, contextOK: ${contextOK},\n    //     callbackOK: ${callbackOK}, descriptionOK: ${descriptionOK}\n    //   `)\n    // }\n    return OK\n  }\n\n  /**\n   * Register a context to trigger a function when any barcode is encountered\n   * @private\n   * @param {object} props\n   *    @member {string} char (v1, conditionally optional)\n   *    @member {RegExp} regex (v1, conditionally optional)\n   *    @member {string || RegExp} match (v2)\n   *    @member {object} context - Node\n   *    @member {function} callback\n   *    @member {string} description\n   */\n  const registerMatch = function(props) {\n    props.match = props.match || props.char || props.regex\n    props.box = {\n      callback: props.callback,\n      description: props.description,\n    }\n    dataLockBox.store(props)\n  }\n\n  /**\n   * Register a context to trigger a function when the character is pressed\n   * @param {object} props\n   * @param {object} context - only required for resursive calls\n   */\n  const register = function(\n    props,\n    context = {\n      time: Date.now(),\n      random: Math.floor(Math.random() * Math.floor(99999)),\n    },\n  ) {\n    if (props instanceof Array) {\n      // bulk registration\n      props.forEach(matchProps => {\n        register(matchProps, context)\n      })\n    } else {\n      props.context = context\n\n      // object registration\n      if (props.match instanceof Array) {\n        // mulltiple match registration\n        props.match.forEach(matchItem => {\n          const matchProps = {\n            ...props,\n            match: matchItem,\n          }\n          register(matchProps, context)\n        })\n      } else {\n        // simple flow\n        if (registrationSanity(props)) {\n          registerMatch(props)\n        }\n      }\n    }\n\n    // return a cleanup function\n    const cleanUpFn = function() {\n      dataLockBox.cleanup(context)\n    }\n    return cleanUpFn\n  }\n\n  /**\n   * Register a context to trigger a function when the character is pressed\n   * @deprecated since version 2.0\n   * @param {object} props\n   * @returns {object}\n   */\n  const registerHotkey = function(props) {\n    convertVersion1Props(props)\n    if (props.match instanceof Array) {\n      // route items in mulltiple match registrations\n      let lastSanePropIfAny, lastProp\n      props.match.forEach(char => {\n        const singleCharProps = Object.assign({}, props, { match: char })\n        lastProp = registerHotkey(singleCharProps)\n        if (lastProp) lastSanePropIfAny = lastProp\n      })\n      return lastSanePropIfAny\n    } else {\n      // simple flow\n      if (registrationSanity(props)) {\n        registerMatch(props)\n        // console.log(`hotkey registered: ${props.match}`)\n        return props\n      }\n    }\n  }\n\n  /**\n   * Register an array of contexts to trigger a function when the character is pressed\n   * @deprecated since version 2.0\n   * @param {array} propsList\n   * @returns {array}\n   */\n  const registerHotkeys = function(propsList) {\n    let refsList = []\n    propsList.forEach(props => {\n      let refs = registerHotkey(props)\n      if (refs) refsList.push(refs)\n    })\n    return refsList\n  }\n\n  /**\n   * Find the right data for hotkey\n   * @param {string} match\n   * @returns {object} data object\n   */\n  const hotkeyHandler = function(char) {\n    // console.log('hotkeyHandler ' + char)\n    if (char === '?') {\n      toggleOverviewPanel()\n    } else {\n      let handle = dataLockBox.retrieve({ entry: char })\n      if (!handle) {\n        const records = dataLockBox.overview()\n        records.some(record => {\n          if (record.match instanceof Array && record.match.includes(char)) {\n            handle = dataLockBox.retrieve({ entry: record.match })\n            // console.log(`handle found: ${handle.description}`)\n          }\n          return Boolean(handle)\n        })\n      }\n      return handle\n    }\n  }\n\n  /**\n   * Register a context to trigger a function when any barcode is encountered\n   * @deprecated since version 2.0\n   * @param {object} props\n   * @returns {object || undefined}\n   */\n  const registerBarcode = function(props) {\n    // console.log(' registerBarcode registerBarcode ')\n    convertVersion1Props(props)\n    if (registrationSanity(props)) {\n      registerMatch(props)\n      // console.log(`barcode registered: ${props.match}`)\n      return props\n    }\n  }\n\n  /**\n   * Find the lengthiest RegExp for barcode\n   * @private\n   * @param {string} barcode\n   * @returns {RegExp}\n   */\n  const barcodeMatch = function(barcode) {\n    let regex = ''\n    const keys = dataLockBox.keys()\n\n    for (let key of keys) {\n      // console.log('examine regex:', key)\n      if (key instanceof RegExp && key.test(barcode)) {\n        // find the most complex RegExp\n        if (key.toString().length > regex.toString().length) {\n          regex = key\n        }\n        // console.log('matched regex:', key, ', pick:', regex)\n      }\n    }\n    // console.log(`barcodeMatch: ${regex}`)\n    return regex\n  }\n\n  /**\n   * Find the right data for barcode\n   * @param {string} barcode\n   * @returns {object} data object\n   */\n  const barcodeHandler = function(barcode) {\n    // console.log('barcodeHandler barcode', barcode)\n    const pattern = barcodeMatch(barcode)\n    // console.log('barcodeHandler pattern', pattern)\n    const retrieved = dataLockBox.retrieve({ entry: pattern })\n    // console.log('barcodeHandler retrieved ', retrieved)\n    return retrieved\n  }\n\n  /**\n   * Generate a list of active entries\n   * @returns {object}\n   */\n  const overviewJson = function() {\n    let records = dataLockBox.overview()\n\n    // look for multiMatches\n    let matchRecords = new Object()\n    records.forEach(record => {\n      var peers = records.filter(\n        other =>\n          other.box.callback === record.box.callback &&\n          other.box.description === record.box.description,\n      )\n      if (peers.length > 1) {\n        var matches = peers.map(peer => peer.match)\n        matchRecords[matches] = 'box'\n      }\n    })\n\n    // add multiMatches as one record, remove seperate records\n    const multiMatches = Object.keys(matchRecords)\n    multiMatches.forEach(multiMatch => {\n      const multiMatchArray = multiMatch.split(',')\n      multiMatchArray.forEach((matchItem, matchIndex) => {\n        records = records.map(record => {\n          if (record && record.match === matchItem) {\n            if (!matchIndex) {\n              // replace first matchItem\n              record = {\n                ...record,\n                match: multiMatch.replace(/,(\\S)/g, ', $1'),\n              }\n            } else {\n              // remove rest of matchItems\n              record = null\n            }\n          }\n          return record\n        })\n      })\n    })\n\n    // split in keystrokes and barcodes\n    let handles = {}\n    records.forEach(record => {\n      if (record && record.box && typeof record.match === 'string') {\n        let toEndUser = {\n          match: record.match,\n          description: record.box.description,\n        }\n        handles.hotkeys = handles.hotkeys\n          ? handles.hotkeys.concat([toEndUser])\n          : [toEndUser]\n      }\n      if (record && record.box && record.match instanceof RegExp) {\n        let toEndUser = {\n          match: 'barcode', //record.match.toString(),\n          description: record.box.description,\n        }\n        handles.barcodes = handles.barcodes\n          ? handles.barcodes.concat([toEndUser])\n          : [toEndUser]\n      }\n    })\n    //console.log('overview:\\n' + JSON.stringify(handles))\n    return handles\n  }\n\n  /**\n   * Coerce a screen in the html - public toggle function\n   */\n  let toggleOverviewPanel = function() {\n    // initial direction; the other is removeOverviewHtml\n    appendOverviewHtml()\n  }\n\n  /**\n   * Coerce a screen in the html - append function\n   * @private\n   */\n  const appendOverviewHtml = function() {\n    const handles = overviewJson()\n\n    // build\n    let svgString = `\n    <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n    \t viewBox=\"0 0 507.2 507.2\" style=\"enable-background:new 0 0 507.2 507.2;\" xml:space=\"preserve\">\n    <circle fill=\"#000000\" cx=\"253.6\" cy=\"253.6\" r=\"253.6\"/>\n    <path fill=\"#FFFFFF\" d=\"M373.6,309.6c11.2,11.2,11.2,30.4,0,41.6l-22.4,22.4c-11.2,11.2-30.4,11.2-41.6,0l-176-176\n    \tc-11.2-11.2-11.2-30.4,0-41.6l23.2-23.2c11.2-11.2,30.4-11.2,41.6,0L373.6,309.6z\"/>\n    <path fill=\"#FFFFFF\" d=\"M309.6,133.6c11.2-11.2,30.4-11.2,41.6,0l23.2,23.2c11.2,11.2,11.2,30.4,0,41.6L197.6,373.6\n    \tc-11.2,11.2-30.4,11.2-41.6,0l-22.4-22.4c-11.2-11.2-11.2-30.4,0-41.6L309.6,133.6z\"/>\n    </svg>\n    `\n    let htmlString = `<table>`\n    const writeMatches = function(prop) {\n      let str = `<thead><tr><th colspan=\"2\">${prop}</th><tr></thead><tbody>`\n      for (let item of handles[prop] || []) {\n        str += `<tr><th>${item.match}</th><td>${item.description}</td></tr>`\n      }\n      return str + `</tbody>`\n    }\n    if (handles.hotkeys) {\n      htmlString += writeMatches('hotkeys')\n    }\n    if (handles.barcodes) {\n      htmlString += writeMatches('barcodes')\n    }\n    if (!handles.hotkeys && !handles.barcodes) {\n      htmlString += writeMatches('no hotkeys or barcodes configured')\n    }\n\n    htmlString += `</table>`\n    let panel = document.createElement('chars-and-chuncks-panel')\n    panel.innerHTML = svgString + htmlString\n\n    // apply\n    dataLockBox.overlay()\n    document.body.appendChild(panel)\n    panel\n      .querySelector('table:first-of-type')\n      .addEventListener('click', removeOverviewHtml)\n    panel\n      .querySelector('svg:first-of-type')\n      .addEventListener('click', removeOverviewHtml)\n\n    // direct the toggle\n    toggleOverviewPanel = function() {\n      removeOverviewHtml()\n    }\n  }\n\n  /**\n   * Remove the open help-screen in the html\n   * @private\n   */\n  const removeOverviewHtml = function() {\n    const panel = document.querySelector('chars-and-chuncks-panel')\n    panel\n      .querySelector('table:first-of-type')\n      .removeEventListener('click', removeOverviewHtml)\n    panel\n      .querySelector('svg:first-of-type')\n      .removeEventListener('click', removeOverviewHtml)\n    panel.remove()\n    dataLockBox.revive()\n\n    // direct the toggle\n    toggleOverviewPanel = function() {\n      appendOverviewHtml()\n    }\n  }\n\n  /*\n   * Make object in context eligible for garbage collection\n   * @param {object} context\n   */\n  const cleanup = function(sanitisedProps) {\n    dataLockBox.cleanup(sanitisedProps.context)\n  }\n\n  return {\n    register: register,\n    registerHotkey: function(props) {\n      const saneProps = registerHotkey(props)\n      return function() {\n        if (saneProps && saneProps.context) cleanup(saneProps)\n      }\n    },\n    registerHotkeys: function(propsList) {\n      const sanePropsList = registerHotkeys(propsList)\n      return function() {\n        sanePropsList.forEach(saneProps => {\n          if (saneProps && saneProps.context) cleanup(saneProps)\n        })\n      }\n    },\n    hotkeyHandler: hotkeyHandler,\n    registerBarcode: function(props) {\n      const saneProps = registerBarcode(props)\n      return function() {\n        if (saneProps && saneProps.context) cleanup(saneProps)\n      }\n    },\n    barcodeHandler: barcodeHandler,\n    overviewJson: overviewJson,\n    overviewPanel: toggleOverviewPanel,\n    reset: dataLockBox.reset,\n    overlay: dataLockBox.overlay,\n    revive: dataLockBox.revive,\n  }\n})()\n\nexport { collectionManagement }\n","let config = {\n  // Maximum time the barcode scanner takes to send the next character\n  safeIntermission: 30,\n  // General treshold to prevent accidental elbow-on-keyboard processing\n  minimalBarcodeLength: 6,\n}\n\nexport { config }\n","import { collectionManagement } from './collectionManagement'\nimport { config } from './configuration'\n\nconst charsAndChunksModule = (function() {\n  // modifiers allowed to compose a character\n  const allowedModifiers = ['Shift', 'Alt']\n\n  // Process variables\n  let streamTimeout = 0\n  let stream = []\n\n  // we leave entry with on-the-fly editing to form controls\n  const fromFormControl = event => {\n    return (\n      event.target.tagName === 'INPUT' ||\n      event.target.tagName === 'TEXTAREA' ||\n      event.target.tagName === 'SELECT'\n    )\n  }\n\n  const settleStream = function(event) {\n    // We only deal with single characters or barcodes.\n    let settle = stream.join('')\n    if (stream.length >= config.minimalBarcodeLength) {\n      let handle = collectionManagement.barcodeHandler(settle)\n      // console.log('handle barcode', settle, handle)\n      if (handle) {\n        handle.callback(settle)\n      }\n    } else if (stream.length === 1) {\n      if (event.ctrlKey) settle = `ctrl+${settle}`\n      let handle = collectionManagement.hotkeyHandler(settle)\n      // console.log('handle hotkey', settle, handle)\n      if (handle) {\n        handle.callback(settle)\n      }\n    } else {\n      //console.log(`invalid stream length: ${stream.length} (${settle})`)\n    }\n    stream = []\n  }\n\n  const streamHandler = function(event) {\n    //console.log(`input: ${event.key}`)\n    if (streamTimeout) {\n      clearTimeout(streamTimeout)\n    }\n\n    // We expect our input can safely be processed; we ignore typing in form controls\n    if (fromFormControl(event)) {\n      stream = []\n      return\n    }\n\n    // We expect our barcode scanner to send character by character.\n    const multiChar = event.key.length > 1\n    if (multiChar) {\n      // Do not wait for new characters\n      // console.log(`out of scope: '${event.key}' in stream: '${stream}'`)\n      if (stream.length && event.key === 'Enter') {\n        settleStream(event)\n        return\n      } else if (!allowedModifiers.includes(event.key)) {\n        // pageDown, Tab, Backspace, etc.\n        // Do not use previous characters also\n        stream = [event.key]\n        settleStream(event)\n        return\n      }\n      // With allowedModifiers we want to set a new timeout\n    } else {\n      // barcode characters pass here\n      stream.push(event.key)\n    }\n\n    streamTimeout = setTimeout(settleStream, config.safeIntermission, event)\n  }\n\n  window.addEventListener('keydown', streamHandler)\n\n  const configure = function(change) {\n    Object.getOwnPropertyNames(change).forEach(prop => {\n      const oldValue = config[prop]\n      const newValue = change[prop]\n      if (typeof oldValue === typeof newValue) {\n        config[prop] = newValue\n      }\n    })\n  }\n\n  return {\n    publicAPI: {\n      config: configure,\n      register: collectionManagement.register,\n      hotkey: collectionManagement.registerHotkey,\n      hotkeys: collectionManagement.registerHotkeys,\n      barcode: collectionManagement.registerBarcode,\n      overview: collectionManagement.overviewJson,\n      help: collectionManagement.overviewPanel,\n      reset: collectionManagement.reset,\n      overlay: collectionManagement.overlay,\n      revive: collectionManagement.revive,\n    },\n    testAPI: {\n      hotkeyHandler: collectionManagement.hotkeyHandler,\n      barcodeHandler: collectionManagement.barcodeHandler,\n    },\n  }\n})()\n\nconst charsAndChunks = charsAndChunksModule.publicAPI\nconst charsAndTests = charsAndChunksModule.testAPI\n\nexport { charsAndChunks, charsAndTests }\n","import { charsAndChunks } from './charsAndChunks'\nimport './helpScreen.scss'\n\nconst index = charsAndChunks\n\nexport default index\n"],"names":["dataLockBox","LockBoxModel","this","lock","Map","box","WeakMap","data","stash","retrieve","props","has","entry","context","get","reset","store","OK","console","error","storageSanity","set","match","keys","overview","records","key","record","push","overlay","Object","assign","revive","length","pop","cleanup","forEach","matchyVal","delete","collectionManagement","catchAllRegExp","convertVersion1Props","regex","char","comment","description","registrationSanity","matchOK","toString","RegExp","contextOK","document","querySelector","callbackOK","callback","descriptionOK","registerMatch","register","time","Date","now","random","Math","floor","Array","matchProps","matchItem","registerHotkey","lastSanePropIfAny","lastProp","singleCharProps","overviewJson","matchRecords","peers","filter","other","matches","map","peer","multiMatch","split","matchIndex","replace","handles","toEndUser","hotkeys","concat","barcodes","toggleOverviewPanel","appendOverviewHtml","htmlString","writeMatches","prop","str","item","panel","createElement","innerHTML","body","appendChild","addEventListener","removeOverviewHtml","removeEventListener","remove","sanitisedProps","saneProps","registerHotkeys","propsList","sanePropsList","refsList","refs","hotkeyHandler","handle","some","includes","Boolean","registerBarcode","barcodeHandler","barcode","pattern","test","barcodeMatch","overviewPanel","config","safeIntermission","minimalBarcodeLength","index","allowedModifiers","streamTimeout","stream","settleStream","event","settle","join","ctrlKey","window","clearTimeout","target","tagName","fromFormControl","setTimeout","publicAPI","change","getOwnPropertyNames","oldValue","newValue","hotkey","help","testAPI"],"mappings":"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"}