{"version":3,"file":"charsAndChunks.js","sources":["../src/collectionManagement.js","../src/charsAndChunks.js"],"sourcesContent":["const collectionManagement = (function() {\n  /**\n   * Map of contexts holding an object with a single charcter, a callback and optionally a comment\n   */\n  let references\n  /**\n   * Map of characters and regular expressions holding a context.\n   */\n  let requests\n\n  /**\n   * Resuseable function for creating blank data objects\n   */\n  const createRunDataObjects = function() {\n    references = new WeakMap()\n    requests = new Map()\n  }\n  createRunDataObjects()\n\n  /**\n   * Default regular expression.\n   */\n  const catchAllRegExp = /^/\n\n  /**\n   * Check sanity of a registration object\n   * @private\n   * @param {object} props\n   */\n  const registrationSanity = function(props) {\n    const matchOK = (function() {\n      if (props.char) {\n        return typeof props.char === 'string'\n      } else if (props.regex) {\n        return props.regex instanceof RegExp\n      }\n    })()\n    const contextOK = (function() {\n      if (typeof props.context === 'string') {\n        props.context = document.querySelector(props.context)\n      }\n      return props.context instanceof Node\n    })()\n    const callbackOK = typeof props.callback === 'function'\n    // check optional comment\n    if (!props.comment || typeof props.comment !== 'string') {\n      props.comment = `callback for ${props.char || 'barcode'}`\n    }\n    const OK = matchOK && contextOK && callbackOK\n    if (!OK) {\n      console.error('Wrong properties for registering hotkeys or barcodes!')\n      //console.log(props)\n    }\n    return OK\n  }\n\n  /**\n   * Register a context to trigger a function when any barcode is encountered\n   * @param {object} props\n   *    @member {string} char (optional)\n   *    @member {RegExp} regex (optional)\n   *    @member {object} context - Node\n   *    @member {function} callback\n   *    @member {string} comment (optional)\n   */\n  const registerEntry = function(props) {\n    const entry = props.char || props.regex\n\n    // Register context with regular expression in a Map\n    requests.set(entry, props.context)\n    if (!references.has(props.context)) {\n      references.set(props.context, {})\n    }\n    // Register data with context in a WeakMap\n    references.get(props.context)[entry] = {\n      callback: props.callback,\n      comment: props.comment,\n    }\n  }\n\n  /**\n   * Register a context to trigger a function when the character is pressed\n   * @param {object} props\n   */\n  const registerHotkey = function(props) {\n    delete props.regex\n    if (registrationSanity(props)) {\n      registerEntry(props)\n      //console.log(`hotkey registered: ${props.char}`)\n    }\n  }\n\n  /**\n   * Check for the node being inside the DOM\n   * @private\n   * @param {Node} node\n   * @returns {boolean} boolean\n   */\n  const isAttached = function(elm) {\n    return (\n      elm &&\n      (elm.getRootNode() instanceof Document ||\n        elm.getRootNode() instanceof ShadowRoot)\n    )\n  }\n\n  /**\n   * Get valid data\n   * @private\n   * @param {Node} context\n   * @param {string | RegExp} entry\n   * @returns {object} data object\n   */\n  const getHandle = function(context, entry) {\n    if (isAttached(context) && references.has(context)) {\n      return references.get(context)[entry]\n    }\n    // should we garbage collect programatically?\n  }\n\n  /**\n   * Find the right data\n   * @private\n   * @param {string | RegExp} entry\n   * @returns {object} data object\n   */\n  const entryHandler = function(entry) {\n    //console.log(`entry to handle: ${entry}`)\n    if (requests.has(entry)) {\n      let requestedContext = requests.get(entry)\n      return getHandle(requestedContext, entry)\n    }\n  }\n\n  /**\n   * Register a context to trigger a function when any barcode is encountered\n   * @param {object} props\n   */\n  const registerBarcode = function(props) {\n    delete props.char\n    if (!props.regex) {\n      props.regex = catchAllRegExp\n    }\n    if (registrationSanity(props)) {\n      registerEntry(props)\n      //console.log(`barcode registered: ${props.regex}`)\n    }\n  }\n\n  /**\n   * Find the right RegExp for barcode\n   * @private\n   * @param {string} barcode\n   * @returns {RegExp}\n   */\n  const barcodeMatch = function(barcode) {\n    var regex = catchAllRegExp\n\n    requests.forEach((reqValue, reqKey) => {\n      if (reqKey instanceof RegExp && reqKey.test(barcode)) {\n        // find the most complex RegExp\n        if (reqKey.toString().length > regex.toString().length) {\n          regex = reqKey\n        }\n      }\n    })\n    return regex\n  }\n\n  /**\n   * Find the right data\n   * @param {string} barcode\n   * @returns {object} data object\n   */\n  const barcodeHandler = function(barcode) {\n    const regex = barcodeMatch(barcode)\n    return entryHandler(regex)\n  }\n\n  /**\n   * Generate a list of active hotkeys and barcode watchers, optionally with their purpose\n   * @returns {object}\n   */\n  const overview = function() {\n    //console.log('overview called')\n    let handles = { hotkey: [], barcode: [] }\n\n    requests.forEach((context, entry) => {\n      if (typeof entry === 'string') {\n        let handle = getHandle(context, entry)\n        if (handle) {\n          let toEndUser = {\n            entry: entry,\n            comment: handle.comment,\n          }\n          handles.hotkey.push(toEndUser)\n        }\n      }\n    })\n\n    requests.forEach((context, entry) => {\n      if (entry instanceof RegExp) {\n        let handle = getHandle(context, entry)\n        if (handle) {\n          let toEndUser = {\n            entry: 'barcode', //entry.toString(),\n            comment: getHandle(context, entry).comment,\n          }\n          handles.barcode.push(toEndUser)\n        }\n      }\n    })\n    //console.log(handles)\n    return handles\n  }\n\n  return {\n    registerHotkey: registerHotkey,\n    hotkeyHandler: entryHandler,\n    registerBarcode: registerBarcode,\n    barcodeHandler: barcodeHandler,\n    overview: overview,\n    reset: createRunDataObjects,\n  }\n})()\n\nexport { collectionManagement }\n","import { collectionManagement } from './collectionManagement'\n\nconst charsAndChunksModule = (function() {\n  // Maximum time the barcode scanner takes to send the next character\n  let safeIntermission = 30\n  // General treshold to prevent accidental elbow-on-keyboard processing\n  let minimalBarcodeLength = 6\n  const allowedModifiers = ['Alt', 'Control', 'Shift']\n  // Process variables\n  let streamTimeout = 0\n  let stream = []\n\n  const settleStream = function() {\n    // We only deal with single characters or barcodes.\n    if (stream.length >= minimalBarcodeLength) {\n      //console.log(`handle as barcode: ${stream.join('')} (${stream.length})`)\n      let handle = collectionManagement.barcodeHandler(stream.join(''))\n      if (handle) {\n        handle.callback(stream)\n      }\n    } else if (stream.length === 1) {\n      //console.log(`handle as character: ${stream.join('')} (${stream.length})`)\n      let handle = collectionManagement.hotkeyHandler(stream.join(''))\n      if (handle) {\n        handle.callback(stream)\n      }\n    } else {\n      //console.log(`invalid stream length: ${stream.length} (${stream.join('')})`)\n    }\n    stream = []\n  }\n\n  const streamHandler = function(event) {\n    //console.log(`input: ${event.key}`)\n    if (streamTimeout) {\n      clearTimeout(streamTimeout)\n    }\n\n    // We expect our input can safely be processed; we leave entry with on-the-fly editing to form controls\n    const fromFormControl =\n      event.target.tagName === 'INPUT' ||\n      event.target.tagName === 'TEXTAREA' ||\n      event.target.tagName === 'SELECT'\n    if (fromFormControl) {\n      stream = []\n      return\n    }\n\n    // We expect our barcode scanner to send character by character.\n    const multiChar = event.key.length > 1\n    if (multiChar) {\n      // Do not wait for new characters\n      //console.log(`out of scope: '${event.key}' in stream: '${stream}'`)\n      if (event.key === 'Enter') {\n        settleStream()\n        return\n      } else if (!allowedModifiers.includes(event.key)) {\n        // pageDown, Tab, Backspace, etc.\n        // Do not use previous characters also\n        stream = [event.key]\n        settleStream()\n        return\n      }\n      // With allowedModifiers we want to set a new timeout\n    } else {\n      stream.push(event.key)\n    }\n\n    streamTimeout = setTimeout(settleStream, safeIntermission)\n  }\n\n  window.addEventListener('keydown', streamHandler)\n\n  return {\n    publicAPI: {\n      hotkey: collectionManagement.registerHotkey,\n      barcode: collectionManagement.registerBarcode,\n      overview: collectionManagement.overview,\n      reset: collectionManagement.reset,\n    },\n    testAPI: {\n      hotkeyHandler: collectionManagement.hotkeyHandler,\n      barcodeHandler: collectionManagement.barcodeHandler,\n    },\n  }\n})()\n\nconst charsAndChunks = charsAndChunksModule.publicAPI\nconst charsAndTests = charsAndChunksModule.testAPI\n\nexport { charsAndChunks, charsAndTests }\n"],"names":["collectionManagement","references","requests","createRunDataObjects","WeakMap","Map","catchAllRegExp","registrationSanity","props","matchOK","char","regex","RegExp","contextOK","context","document","querySelector","Node","callbackOK","callback","comment","OK","console","error","registerEntry","entry","set","has","get","getHandle","elm","getRootNode","Document","ShadowRoot","entryHandler","requestedContext","registerHotkey","hotkeyHandler","registerBarcode","barcodeHandler","barcode","forEach","reqValue","reqKey","test","toString","length","barcodeMatch","overview","handles","hotkey","handle","toEndUser","push","reset","allowedModifiers","streamTimeout","stream","settleStream","join","window","addEventListener","event","clearTimeout","target","tagName","key","includes","setTimeout","publicAPI","testAPI"],"mappings":"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"}