{"version":3,"file":"charsAndChunks.js","sources":["../src/collectionManagement.js","../src/charsAndChunks.js"],"sourcesContent":["const collectionManagement = (function() {\n  /**\n   * Map of contexts holding an object with a single charcter, a callback and optionally a comment\n   */\n  let references = new WeakMap()\n  /**\n   * Map of characters and regular expressions holding a context.\n   */\n  let requests = new Map()\n  /**\n   * Default regular expression.\n   */\n  const catchAllRegExp = /^/\n\n  /**\n   * Check sanity of a registration object\n   * @param {object} props\n   */\n  const registrationSanity = function(props) {\n    const matchOK = (function() {\n      if (props.char) {\n        return typeof props.char === 'string' && props.char.length === 1\n      } else if (props.regex) {\n        return props.regex instanceof RegExp\n      }\n    })()\n    const contextOK = (function() {\n      if (typeof props.context === 'string') {\n        props.context = document.querySelector(props.context)\n      }\n      return props.context instanceof Node\n    })()\n    const callbackOK = typeof props.callback === 'function'\n    // check optional comment\n    if (!props.comment) {\n      props.comment = `callback for ${props.char || 'barcode'}`\n    }\n    const OK = matchOK && contextOK && callbackOK\n    if (!OK) {\n      console.error('Wrong properties for registering hotkeys or barcodes!')\n    }\n    return OK\n  }\n\n  /**\n   * Register a context to trigger a function when any barcode is encountered\n   * @param {object} props\n   *    @member {string} char (optional)\n   *    @member {RegExp} regex (optional)\n   *    @member {object} context - Node\n   *    @member {function} callback\n   *    @member {string} comment (optional)\n   */\n  const registerEntry = function(props) {\n    const entry = props.char || props.regex\n\n    // Register context with regular expression in a Map\n    requests.set(entry, props.context)\n    if (!references.has(props.context)) {\n      references.set(props.context, {})\n    }\n    // Register data with context in a WeakMap\n    references.get(props.context)[entry] = {\n      callback: props.callback,\n      comment: props.comment,\n    }\n  }\n\n  /**\n   * Register a context to trigger a function when the character is pressed\n   * @param {object} props\n   */\n  const registerHotkey = function(props) {\n    delete props.regex\n    if (registrationSanity(props)) {\n      registerEntry(props)\n      //console.log(`hotkey registered: ${props.char}`)\n    }\n  }\n\n  /**\n   * Get valid data\n   * @private\n   * @param {Node} context\n   * @param {string | RegExp} entry\n   * @returns {object} data object\n   */\n  const getHandle = function(context, entry) {\n    if (context && context.parentNode && references.has(context)) {\n      return references.get(context)[entry]\n    }\n    // should we garbage collect programatically?\n  }\n\n  /**\n   * Find the right data\n   * @private\n   * @param {string | RegExp} entry\n   * @returns {object} data object\n   */\n  const entryHandler = function(entry) {\n    if (requests.has(entry)) {\n      let requestedContext = requests.get(entry)\n      return getHandle(requestedContext, entry)\n    }\n  }\n\n  /**\n   * Register a context to trigger a function when any barcode is encountered\n   * @param {object} props\n   */\n  const registerBarcode = function(props) {\n    delete props.char\n    if (!props.regex) {\n      props.regex = catchAllRegExp\n    }\n    if (registrationSanity(props)) {\n      registerEntry(props)\n      //console.log(`barcode registered: ${props.regex}`)\n    }\n  }\n\n  /**\n   * Find the right RegExp for barcode\n   * @private\n   * @param {string} barcode\n   * @returns {RegExp}\n   */\n  const barcodeMatch = function(barcode) {\n    var regex = catchAllRegExp\n\n    requests.forEach((reqValue, reqKey) => {\n      if (reqKey instanceof RegExp && reqKey.test(barcode)) {\n        // find the most complex RegExp\n        if (reqKey.toString().length > regex.toString().length) {\n          regex = reqKey\n        }\n      }\n    })\n    return regex\n  }\n\n  /**\n   * Find the right data\n   * @private\n   * @param {string} barcode\n   * @returns {object} data object\n   */\n  const barcodeHandler = function(barcode) {\n    const regex = barcodeMatch(barcode)\n    return entryHandler(regex)\n  }\n\n  /**\n   * Generate a list of active hotkeys and barcode watchers, optionally with their purpose\n   * @returns {object}\n   */\n  const overview = function() {\n    //console.log('overview called')\n    let handles = { hotkey: [], barcode: [] }\n\n    requests.forEach((context, entry) => {\n      if (typeof entry === 'string') {\n        let handle = getHandle(context, entry)\n        if (handle) {\n          let toEndUser = {\n            entry: entry,\n            comment: handle.comment,\n          }\n          handles.hotkey.push(toEndUser)\n        }\n      }\n    })\n\n    requests.forEach((context, entry) => {\n      if (entry instanceof RegExp) {\n        let handle = getHandle(context, entry)\n        if (handle) {\n          let toEndUser = {\n            entry: 'barcode', //entry.toString(),\n            comment: getHandle(context, entry).comment,\n          }\n          handles.barcode.push(toEndUser)\n        }\n      }\n    })\n    //console.log(handles)\n    return handles\n  }\n\n  return {\n    registerHotkey: registerHotkey,\n    hotkeyHandler: entryHandler,\n    registerBarcode: registerBarcode,\n    barcodeHandler: barcodeHandler,\n    overview: overview,\n  }\n})()\n\nexport { collectionManagement }\n","import { collectionManagement } from './collectionManagement'\n\nconst charsAndChunksModule = (function() {\n  // Maximum time the barcode scanner takes to send the next character\n  let safeIntermission = 30\n  // General treshold to prevent accidental elbow-on-keyboard processing\n  let minimalBarcodeLength = 6\n  const allowedModifiers = ['Alt', 'Shift']\n  // Process variables\n  let streamTimeout = 0\n  let stream = ''\n\n  const settleStream = function() {\n    // We only deal with single characters or barcodes.\n    if (stream.length >= minimalBarcodeLength) {\n      //console.log(`handle as barcode: ${stream} (${stream.length})`)\n      let handle = collectionManagement.barcodeHandler(stream)\n      if (handle) {\n        handle.callback(stream)\n      }\n    } else if (stream.length === 1) {\n      //console.log(`handle as character: ${stream} (${stream.length})`)\n      let handle = collectionManagement.hotkeyHandler(stream)\n      if (handle) {\n        handle.callback(stream)\n      }\n    } else {\n      //console.log(`invalid stream length: ${stream.length} (${stream})`)\n    }\n    stream = ''\n  }\n\n  const streamHandler = function(event) {\n    //console.log(`input: ${event.key}`)\n    if (streamTimeout) {\n      clearTimeout(streamTimeout)\n    }\n\n    // We expect our barcode scanner to send character by character.\n    let charByChar = event.key.length === 1\n    // We expect our input can safely be processed; we leave entry with on-the-fly editing to form controls\n    let fromFormControl =\n      event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA'\n    let notOurScope = !charByChar || fromFormControl\n\n    if (notOurScope) {\n      //console.log(`out of scope: '${event.key}' in stream: '${stream}'`)\n      if (event.key === 'Enter') {\n        // Do not wait for new characters\n        settleStream()\n        return\n      } else if (!allowedModifiers.includes(event.key)) {\n        clearTimeout(streamTimeout)\n        stream = ''\n        return\n      }\n      // With allowedModifiers we want to set a new timeout\n    } else {\n      stream += event.key\n    }\n\n    streamTimeout = setTimeout(settleStream, safeIntermission)\n  }\n\n  window.addEventListener('keydown', streamHandler)\n\n  return {\n    publicAPI: {\n      hotkey: collectionManagement.registerHotkey,\n      barcode: collectionManagement.registerBarcode,\n      overview: collectionManagement.overview,\n    },\n    testAPI: {\n      hotkeyHandler: collectionManagement.hotkeyHandler,\n      barcodeHandler: collectionManagement.barcodeHandler,\n    },\n  }\n})()\n\nconst charsAndChunks = charsAndChunksModule.publicAPI\nconst charsAndTests = charsAndChunksModule.testAPI\n\nexport { charsAndChunks, charsAndTests }\n"],"names":["collectionManagement","references","WeakMap","requests","Map","catchAllRegExp","registrationSanity","props","matchOK","char","length","regex","RegExp","contextOK","context","document","querySelector","Node","callbackOK","callback","comment","OK","console","error","registerEntry","entry","set","has","get","getHandle","parentNode","entryHandler","requestedContext","registerHotkey","hotkeyHandler","registerBarcode","barcodeHandler","barcode","forEach","reqValue","reqKey","test","toString","barcodeMatch","overview","handles","hotkey","handle","toEndUser","push","allowedModifiers","streamTimeout","stream","settleStream","window","addEventListener","event","clearTimeout","charByChar","key","fromFormControl","target","tagName","includes","setTimeout","publicAPI","testAPI"],"mappings":"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"}