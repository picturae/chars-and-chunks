{"version":3,"file":"charsAndChunks.js","sources":["../src/dataLockBox.js","../src/collectionManagement.js","../src/charsAndChunks.js"],"sourcesContent":["const dataLockBox = (function() {\n  /**\n   * Definition of storage structure\n   * @member {Map} lock - Map of characters and regular expressions holding a context.\n   * @member {WeakMap} box - WeakMap of contexts holding an object with a single charcter, a callback and optionally a comment\n   */\n  const LockBoxModel = function() {\n    this.lock = new Map()\n    this.box = new WeakMap()\n  }\n\n  let data = new LockBoxModel()\n\n  let stash = []\n\n  /**\n   * Snaity check for storage\n   * @private\n   * @returns {boolean} is sane\n   */\n  const storageSanity = function(props) {\n    const OK = typeof props.context === 'object'\n    if (!OK) {\n      console.error('Cannot store')\n    }\n    return OK\n  }\n\n  /**\n   * Store a user entry and a validatable context as lock\n   * and a context as a box with entries holding data\n   * @private\n   * @param {object} props\n   *    @member {primitive | object} entry\n   *    @member {object} context\n   *    @member {primitive | object} box - the data itself\n   */\n  const store = function(props) {\n    if (!storageSanity(props)) return\n    // Register context with string or regular expression in a Map\n    data.lock.set(props.entry, props.context)\n    if (!data.box.has(props.context)) {\n      data.box.set(props.context, {})\n    }\n    // Register data with context in a WeakMap\n    data.box.get(props.context)[props.entry] = props.box\n  }\n\n  /**\n   * Generic positive validator\n   * @private\n   * @returns {boolean} truth\n   */\n  const returnTrue = function() {\n    return true\n  }\n\n  /**\n   * Find the right data for entry\n   * @param {object} props\n   *   @member {string} entry - key for the lock map\n   * @returns {object} stored data object\n   */\n  const retrieve = function(props, contextValidator = returnTrue) {\n    //console.log(`entry to handle: ${props.entry}`)\n\n    if (data.lock.has(props.entry)) {\n      // find context from lock,\n      let context = data.lock.get(props.entry)\n      if (context && data.box.has(context)) {\n        if (contextValidator(context)) {\n          return data.box.get(context)[props.entry]\n        } else {\n          data.lock.set(props.entry, undefined)\n          data.box.delete(context)\n        }\n      }\n    }\n  }\n\n  /**\n   * Generate a list of active entries (those with a valid context)\n   * @returns {Array} records\n   */\n  const overview = function(contextValidator = returnTrue) {\n    let records = []\n    const keys = data.lock.keys()\n\n    for (let key of keys) {\n      let box = retrieve({ entry: key }, contextValidator)\n      if (data.lock.get(key)) {\n        let record = { entry: key, box: box }\n        records.push(record)\n      }\n    }\n    //console.log('overview' + JSON.stringify(records))\n    return records\n  }\n\n  /**\n   * Clear all entries and data\n   */\n  const reset = function() {\n    data = new LockBoxModel()\n  }\n\n  /*\n   * Disable all current data en put up a clean storage\n   */\n  const overlay = function() {\n    stash.push(Object.assign({}, data))\n    reset()\n    //console.log(`go to stack level ${stash.length}`)\n  }\n\n  /*\n   * Remove the superseded data and enable the previous data\n   */\n  const revive = function() {\n    if (stash.length) {\n      //console.log(`remove stack level ${stash.length}`)\n      data = stash.pop()\n    }\n  }\n\n  return {\n    store: store,\n    retrieve: retrieve,\n    keys: function() {\n      return data.lock.keys()\n    },\n    overview: overview,\n    reset: reset,\n    overlay: overlay,\n    revive: revive,\n  }\n})()\n\nexport { dataLockBox }\n","import { dataLockBox } from './dataLockBox'\n\nconst collectionManagement = (function() {\n  /**\n   * Default regular expression.\n   */\n  const catchAllRegExp = /^/\n\n  /**\n   * Check sanity of a registration object\n   * @private\n   * @param {object} props\n   */\n  const registrationSanity = function(props) {\n    const matchOK = (function() {\n      if (props.char) {\n        return typeof props.char === 'string' || props.char instanceof Array\n      } else if (props.regex) {\n        return props.regex instanceof RegExp\n      }\n    })()\n    const contextOK = (function() {\n      if (typeof props.context === 'string') {\n        props.context = document.querySelector(props.context)\n      }\n      return props.context instanceof Node\n    })()\n    const callbackOK = typeof props.callback === 'function'\n    // check optional comment\n    if (!props.comment || typeof props.comment !== 'string') {\n      props.comment = `callback for ${props.char || 'barcode'}`\n    }\n    const OK = matchOK && contextOK && callbackOK\n    if (!OK) {\n      console.error('Wrong properties for registering hotkeys or barcodes!')\n      if (location.port) console.log(props)\n    }\n    return OK\n  }\n\n  /**\n   * Register a context to trigger a function when any barcode is encountered\n   * @private\n   * @param {object} props\n   *    @member {string} char (conditionally optional)\n   *    @member {RegExp} regex (conditionally optional)\n   *    @member {object} context - Node\n   *    @member {function} callback\n   *    @member {string} comment (optional)\n   */\n  const registerEntry = function(props) {\n    props.entry = props.char || props.regex\n    props.box = {\n      callback: props.callback,\n      comment: props.comment,\n    }\n    dataLockBox.store(props)\n  }\n\n  /**\n   * Register a context to trigger a function when the character is pressed\n   * @param {object} props\n   */\n  const registerHotkey = function(props) {\n    delete props.regex\n    if (registrationSanity(props)) {\n      registerEntry(props)\n      //console.log(`hotkey registered: ${props.char}`)\n    }\n  }\n\n  /**\n   * Check for the node being inside the DOM\n   * @private\n   * @param {Node} node\n   * @returns {boolean} boolean - true when the node is onscreen -- not removed\n   */\n  const isAttached = function(elm) {\n    return (\n      elm &&\n      (elm.getRootNode() instanceof Document ||\n        elm.getRootNode() instanceof ShadowRoot)\n    )\n  }\n\n  /**\n   * Find the right data for hotkey\n   * @param {string} char\n   * @returns {object} data object\n   */\n  const hotkeyHandler = function(char) {\n    //console.log('hotkeyHandler ' + char)\n    if (char === '?') {\n      toggleOverviewPanel()\n    } else {\n      let handle = dataLockBox.retrieve({ entry: char }, isAttached)\n      if (!handle) {\n        const records = dataLockBox.overview(isAttached)\n        records.some(record => {\n          if (record.entry instanceof Array && record.entry.includes(char)) {\n            handle = dataLockBox.retrieve({ entry: record.entry }, isAttached)\n            //console.log(`handle found: ${handle.comment}`)\n          }\n          return Boolean(handle)\n        })\n      }\n      return handle\n    }\n  }\n\n  /**\n   * Register a context to trigger a function when any barcode is encountered\n   * @param {object} props\n   */\n  const registerBarcode = function(props) {\n    delete props.char\n    if (!props.regex) {\n      props.regex = catchAllRegExp\n    }\n    if (registrationSanity(props)) {\n      registerEntry(props)\n      //console.log(`barcode registered: ${props.regex}`)\n    }\n  }\n\n  /**\n   * Find the lengthiest RegExp for barcode\n   * @private\n   * @param {string} barcode\n   * @returns {RegExp}\n   */\n  const barcodeMatch = function(barcode) {\n    let regex = catchAllRegExp\n    const keys = dataLockBox.keys()\n\n    for (let key of keys) {\n      if (key instanceof RegExp && key.test(barcode)) {\n        // find the most complex RegExp\n        if (key.toString().length > regex.toString().length) {\n          regex = key\n        }\n      }\n    }\n    return regex\n  }\n\n  /**\n   * Find the right data for barcode\n   * @param {string} barcode\n   * @returns {object} data object\n   */\n  const barcodeHandler = function(barcode) {\n    const regex = barcodeMatch(barcode)\n    return dataLockBox.retrieve({ entry: regex }, isAttached)\n  }\n\n  /**\n   * Generate a list of active entries (those with a valid context)\n   * @returns {object}\n   */\n  const overviewJson = function() {\n    let handles = {}\n    const records = dataLockBox.overview(isAttached)\n\n    records.forEach(record => {\n      if (\n        record.box &&\n        (typeof record.entry === 'string' || record.entry instanceof Array)\n      ) {\n        let toEndUser = {\n          entry: record.entry.toString().replace(/(.+),(.+)/g, '$1, $2'),\n          comment: record.box.comment,\n        }\n        handles.hotkeys = handles.hotkeys\n          ? handles.hotkeys.concat([toEndUser])\n          : [toEndUser]\n      }\n      if (record.box && record.entry instanceof RegExp) {\n        let toEndUser = {\n          entry: 'barcode', //record.entry.toString(),\n          comment: record.box.comment,\n        }\n        handles.barcodes = handles.barcodes\n          ? handles.barcodes.concat([toEndUser])\n          : [toEndUser]\n      }\n    })\n    //console.log('overview:\\n' + JSON.stringify(handles))\n    return handles\n  }\n\n  /**\n   * Coerce a screen in the html - public toggle function\n   */\n  let toggleOverviewPanel = function() {\n    appendOverviewHtml()\n  }\n\n  /**\n   * Coerce a screen in the html - append function\n   * @private\n   */\n  const appendOverviewHtml = function() {\n    const handles = overviewJson()\n\n    // build\n    let svgString = `\n    <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n    \t viewBox=\"0 0 507.2 507.2\" style=\"enable-background:new 0 0 507.2 507.2;\" xml:space=\"preserve\">\n    <circle fill=\"#000000\" cx=\"253.6\" cy=\"253.6\" r=\"253.6\"/>\n    <path fill=\"#FFFFFF\" d=\"M373.6,309.6c11.2,11.2,11.2,30.4,0,41.6l-22.4,22.4c-11.2,11.2-30.4,11.2-41.6,0l-176-176\n    \tc-11.2-11.2-11.2-30.4,0-41.6l23.2-23.2c11.2-11.2,30.4-11.2,41.6,0L373.6,309.6z\"/>\n    <path fill=\"#FFFFFF\" d=\"M309.6,133.6c11.2-11.2,30.4-11.2,41.6,0l23.2,23.2c11.2,11.2,11.2,30.4,0,41.6L197.6,373.6\n    \tc-11.2,11.2-30.4,11.2-41.6,0l-22.4-22.4c-11.2-11.2-11.2-30.4,0-41.6L309.6,133.6z\"/>\n    </svg>\n    `\n    let htmlString = `<table>`\n    const writeEntries = function(prop) {\n      let str = `<thead><tr><th colspan=\"2\">${prop}</th><tr></thead><tbody>`\n      for (let item of handles[prop] || []) {\n        str += `<tr><th>${item.entry}</th><td>${item.comment}</td></tr>`\n      }\n      return str + `</tbody>`\n    }\n    if (handles.hotkeys) {\n      htmlString += writeEntries('hotkeys')\n    }\n    if (handles.barcodes) {\n      htmlString += writeEntries('barcodes')\n    }\n    if (!handles.hotkeys && !handles.barcodes) {\n      htmlString += writeEntries('no hotkeys or barcodes configured')\n    }\n\n    htmlString += `</table>`\n    let panel = document.createElement('chars-and-chuncks-panel')\n    panel.innerHTML = svgString + htmlString\n\n    // apply\n    dataLockBox.overlay()\n    document.body.appendChild(panel)\n    panel\n      .querySelector('table:first-of-type')\n      .addEventListener('click', removeOverviewHtml)\n    panel\n      .querySelector('svg:first-of-type')\n      .addEventListener('click', removeOverviewHtml)\n\n    // direct the toggle\n    toggleOverviewPanel = function() {\n      removeOverviewHtml()\n    }\n  }\n\n  /**\n   * Remove the open help-screen in the html\n   * @private\n   */\n  const removeOverviewHtml = function(event) {\n    const panel = document.querySelector('chars-and-chuncks-panel')\n    panel\n      .querySelector('table:first-of-type')\n      .removeEventListener('click', removeOverviewHtml)\n    panel\n      .querySelector('svg:first-of-type')\n      .removeEventListener('click', removeOverviewHtml)\n    panel.querySelector('svg').removeEventListener('click', removeOverviewHtml)\n    panel.remove()\n    dataLockBox.revive()\n    toggleOverviewPanel = function() {\n      appendOverviewHtml()\n    }\n  }\n\n  return {\n    registerHotkey: registerHotkey,\n    hotkeyHandler: hotkeyHandler,\n    registerBarcode: registerBarcode,\n    barcodeHandler: barcodeHandler,\n    overviewJson: overviewJson,\n    overviewPanel: toggleOverviewPanel,\n    reset: dataLockBox.reset,\n    overlay: dataLockBox.overlay,\n    revive: dataLockBox.revive,\n  }\n})()\n\nexport { collectionManagement }\n","import { collectionManagement } from './collectionManagement'\n\nconst charsAndChunksModule = (function() {\n  // Maximum time the barcode scanner takes to send the next character\n  let safeIntermission = 30\n  // General treshold to prevent accidental elbow-on-keyboard processing\n  let minimalBarcodeLength = 6\n\n  const allowedModifiers = ['Shift']\n  // Process variables\n  let streamTimeout = 0\n  let stream = []\n\n  const settleStream = function(event) {\n    // We only deal with single characters or barcodes.\n    let settle = stream.join('')\n    if (stream.length >= minimalBarcodeLength) {\n      //console.log(`handle as barcode: ${settle} (${stream.length})`)\n      let handle = collectionManagement.barcodeHandler(settle)\n      if (handle) {\n        handle.callback(settle)\n      }\n    } else if (stream.length === 1) {\n      //console.log(`handle as character: ${settle} (${stream.length})`)\n      if (event.ctrlKey) settle = `ctrl+${settle}`\n      let handle = collectionManagement.hotkeyHandler(settle)\n      if (handle) {\n        handle.callback(settle)\n      }\n    } else {\n      //console.log(`invalid stream length: ${stream.length} (${settle})`)\n    }\n    stream = []\n  }\n\n  const streamHandler = function(event) {\n    //console.log(`input: ${event.key}`)\n    if (streamTimeout) {\n      clearTimeout(streamTimeout)\n    }\n\n    // We expect our input can safely be processed; we leave entry with on-the-fly editing to form controls\n    const fromFormControl =\n      event.target.tagName === 'INPUT' ||\n      event.target.tagName === 'TEXTAREA' ||\n      event.target.tagName === 'SELECT'\n    if (fromFormControl) {\n      stream = []\n      return\n    }\n\n    // We expect our barcode scanner to send character by character.\n    const multiChar = event.key.length > 1\n    if (multiChar) {\n      // Do not wait for new characters\n      //console.log(`out of scope: '${event.key}' in stream: '${stream}'`)\n      if (event.key === 'Enter') {\n        settleStream(event)\n        return\n      } else if (!allowedModifiers.includes(event.key)) {\n        // pageDown, Tab, Backspace, etc.\n        // Do not use previous characters also\n        stream = [event.key]\n        settleStream(event)\n        return\n      }\n      // With allowedModifiers we want to set a new timeout\n    } else {\n      stream.push(event.key)\n    }\n\n    streamTimeout = setTimeout(settleStream, safeIntermission, event)\n  }\n\n  window.addEventListener('keydown', streamHandler)\n\n  return {\n    publicAPI: {\n      hotkey: collectionManagement.registerHotkey,\n      barcode: collectionManagement.registerBarcode,\n      overview: collectionManagement.overviewJson,\n      help: collectionManagement.overviewPanel,\n      reset: collectionManagement.reset,\n      overlay: collectionManagement.overlay,\n      revive: collectionManagement.revive,\n    },\n    testAPI: {\n      hotkeyHandler: collectionManagement.hotkeyHandler,\n      barcodeHandler: collectionManagement.barcodeHandler,\n    },\n  }\n})()\n\nconst charsAndChunks = charsAndChunksModule.publicAPI\nconst charsAndTests = charsAndChunksModule.testAPI\n\nexport { charsAndChunks, charsAndTests }\n"],"names":["dataLockBox","LockBoxModel","this","lock","Map","box","WeakMap","data","stash","returnTrue","retrieve","props","contextValidator","has","entry","context","get","set","undefined","delete","reset","store","OK","console","error","storageSanity","keys","overview","records","key","record","push","overlay","Object","assign","revive","length","pop","collectionManagement","catchAllRegExp","registrationSanity","matchOK","char","Array","regex","RegExp","contextOK","document","querySelector","Node","callbackOK","callback","comment","location","port","log","registerEntry","isAttached","elm","getRootNode","Document","ShadowRoot","overviewJson","handles","forEach","toEndUser","toString","replace","hotkeys","concat","barcodes","toggleOverviewPanel","appendOverviewHtml","htmlString","writeEntries","prop","str","item","panel","createElement","innerHTML","body","appendChild","addEventListener","removeOverviewHtml","event","removeEventListener","remove","registerHotkey","hotkeyHandler","handle","some","includes","Boolean","registerBarcode","barcodeHandler","barcode","test","barcodeMatch","overviewPanel","allowedModifiers","streamTimeout","stream","settleStream","settle","join","ctrlKey","window","clearTimeout","target","tagName","setTimeout","publicAPI","hotkey","help","testAPI"],"mappings":"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"}